#!/bin/bash
set -euo pipefail

# retry <number-of-retries> <command>
function retry {
  local retries=$1; shift
  local attempts=1

  until "$@"; do
    retry_exit_status=$?
    echo "Exited with $retry_exit_status"
    if (( retries == "0" )); then
      return $retry_exit_status
    elif (( attempts == retries )); then
      echo "Failed $attempts retries"
      return $retry_exit_status
    else
      echo "Retrying $((retries - attempts)) more times..."
      attempts=$((attempts + 1))
      sleep $(((attempts - 2) * 2))
    fi
  done
}

# Reads a list from plugin config into a global result array
# Returns success if values were read
plugin_read_list_into_result() {
  result=()

  for prefix in "$@" ; do
    local i=0
    local parameter="${prefix}_${i}"

    if [[ -n "${!prefix:-}" ]] ; then
      echo "ðŸš¨ Plugin received a string for $prefix, expected an array" >&2
      exit 1
    fi

    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  done

  [[ ${#result[@]} -gt 0 ]] || return 1
}

# docker's -v arguments don't do local path expansion, so we add very simple support for .
expand_relative_volume_path() {
  local path="$1"
  if [[ $path =~ ^\.: ]] ; then
    printf "%s" "${PWD}${path#.}"
  elif [[ $path =~ ^\.(/|\\) ]] ; then
    printf "%s" "${PWD}/${path#.}"
  else
    echo "$path"
  fi
}

is_windows() {
  [[ "$OSTYPE" =~ ^(win|msys|cygwin) ]]
}

is_macos() {
  [[ "$OSTYPE" =~ ^(darwin) ]]
}

tty_default='on'
init_default='on'
rm_default='on'
mount_agent_default='on'
mount_ssh_agent=''
pwd_default="$PWD"
workdir_default="/workdir"

# Set operating system specific defaults
if is_windows ; then
  tty_default=''
  init_default=''
  mount_agent_default=''
  workdir_default="C:\\workdir"
  # escaping /C is a necessary workaround for an issue with Git for Windows 2.24.1.2
  # https://github.com/git-for-windows/git/issues/2442
  pwd_default="$(cmd.exe //C "echo %CD%")"
elif is_macos ; then
  mount_agent_default=''
fi

args=()

# Support switching tty off
if [[ "${BUILDKITE_PLUGIN_DOCKER_TTY:-$tty_default}" =~ ^(true|on|1)$ ]] ; then
  args+=("-it")
else
  args+=("-i")
fi

# Support docker run --rm.
if [[ "${BUILDKITE_PLUGIN_DOCKER_RM:-$rm_default}" =~ ^(true|on|1)$ ]] ; then
    args+=("--rm")
fi

# Support docker run --init.
if [[ "${BUILDKITE_PLUGIN_DOCKER_INIT:-$init_default}" =~ ^(true|on|1)$ ]] ; then
    args+=("--init")
fi

# Parse tmpfs property.
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_TMPFS ; then
  for arg in "${result[@]}" ; do
    args+=( "--tmpfs" "$(expand_relative_volume_path "${arg}")" )
  done
fi

workdir=''

if [[ -n "${BUILDKITE_PLUGIN_DOCKER_WORKDIR:-}" ]] || [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_CHECKOUT:-on}" =~ ^(true|on|1)$ ]] ; then
  workdir="${BUILDKITE_PLUGIN_DOCKER_WORKDIR:-$workdir_default}"
fi

# By default, mount $PWD onto $WORKDIR
if [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_CHECKOUT:-on}" =~ ^(true|on|1)$ ]] ; then
  args+=( "--volume" "${pwd_default}:${workdir}" )
fi

# Parse volumes (and deprecated mounts) and add them to the docker args
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_VOLUMES BUILDKITE_PLUGIN_DOCKER_MOUNTS ; then
  for arg in "${result[@]}" ; do
    args+=( "--volume" "$(expand_relative_volume_path "${arg}")" )
  done
fi

# Parse devices and add them to the docker args
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_DEVICES ; then
  for arg in "${result[@]}" ; do
    args+=( "--device" "${arg}" )
  done
fi

# Parse sysctl args and add them to docker args
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_SYSCTLS ; then
  for arg in "${result[@]}" ; do
    args+=( "--sysctl" "$arg" )
  done
fi

# Set workdir if one is provided or if the checkout is mounted
if [[ -n "${workdir:-}" ]] || [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_CHECKOUT:-on}" =~ ^(true|on|1)$ ]]; then
  args+=("--workdir" "${workdir}")
fi

# Support docker run --user
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_USER:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_DOCKER_PROPAGATE_UID_GID:-}" ]]; then
  echo "+++ Error: Can't set both user and propagate-uid-gid"
  exit 1
fi

if [[ -n "${BUILDKITE_PLUGIN_DOCKER_USER:-}" ]] ; then
  args+=("-u" "${BUILDKITE_PLUGIN_DOCKER_USER:-}")
fi

# Parse publish args and add them to docker args
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_PUBLISH ; then
  for arg in "${result[@]}" ; do
    args+=( "--publish" "$arg" )
  done
fi

if [[ -n "${BUILDKITE_PLUGIN_DOCKER_PROPAGATE_UID_GID:-}" ]] ; then
  args+=("-u" "$(id -u):$(id -g)")
fi

# Support docker run --group-add
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ADDITIONAL_GROUPS_[0-9]+) ]] ; then
    args+=( "--group-add" "${!name}" )
  fi
done < <(env | sort)

# Support docker run --userns
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_USERNS:-}" ]]; then
  # However, if BUILDKITE_PLUGIN_DOCKER_PRIVILEGED is enabled, then userns MUST
  # be overridden to host per limitations of docker
  # https://docs.docker.com/engine/security/userns-remap/#user-namespace-known-limitations
  if [[ "${BUILDKITE_PLUGIN_DOCKER_PRIVILEGED:-false}" =~ ^(true|on|1)$ ]] ; then
      args+=("--userns" "host")
  else
      args+=("--userns" "${BUILDKITE_PLUGIN_DOCKER_USERNS:-}")
  fi
fi

# Mount ssh-agent socket and known_hosts
if [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_SSH_AGENT:-$mount_ssh_agent}" =~ ^(true|on|1)$ ]] ; then
  if [[ -z "${SSH_AUTH_SOCK:-}" ]] ; then
    echo "+++ ðŸš¨ \$SSH_AUTH_SOCK isn't set, has ssh-agent started?"
    exit 1
  fi
  if [[ ! -S "${SSH_AUTH_SOCK}" ]] ; then
    echo "+++ ðŸš¨ There isn't any file at ${SSH_AUTH_SOCK}, has ssh-agent started?"
    exit 1
  fi
  if [[ ! -S "${SSH_AUTH_SOCK}" ]] ; then
    echo "+++ ðŸš¨ The file at ${SSH_AUTH_SOCK} isn't a socket, has ssh-agent started?"
    exit 1
  fi
  args+=(
    "--env" "SSH_AUTH_SOCK=/ssh-agent"
    "--volume" "${SSH_AUTH_SOCK}:/ssh-agent"
    "--volume" "${HOME}/.ssh/known_hosts:/root/.ssh/known_hosts"
  )
fi

# Handle the mount-buildkite-agent option
if [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_BUILDKITE_AGENT:-$mount_agent_default}" =~ ^(true|on|1)$ ]] ; then
  if [[ -z "${BUILDKITE_AGENT_BINARY_PATH:-}" ]] ; then
    if ! command -v buildkite-agent >/dev/null 2>&1 ; then
      echo -n "+++ ðŸš¨ Failed to find buildkite-agent in PATH to mount into container, "
      echo "you can disable this behaviour with 'mount-buildkite-agent:false'"
    else
      BUILDKITE_AGENT_BINARY_PATH=$(command -v buildkite-agent)
    fi
  fi
fi

# Mount buildkite-agent if we have a path for it
if [[ -n "${BUILDKITE_AGENT_BINARY_PATH:-}" ]] ; then
  args+=(
    "--env" "BUILDKITE_JOB_ID"
    "--env" "BUILDKITE_BUILD_ID"
    "--env" "BUILDKITE_AGENT_ACCESS_TOKEN"
    "--volume" "$BUILDKITE_AGENT_BINARY_PATH:/usr/bin/buildkite-agent"
  )
fi

# Parse extra env vars and add them to the docker args
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ENVIRONMENT_[0-9]+) ]] ; then
    args+=( "--env" "${!name}" )
  fi
done < <(env | sort)

# Parse host mappings and add them to the docker args
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ADD_HOST_[0-9]+) ]] ; then
    args+=( "--add-host" "${!name}" )
  fi
done < <(env | sort)

# Privileged container
if [[ "${BUILDKITE_PLUGIN_DOCKER_PRIVILEGED:-false}" =~ ^(true|on|1)$ ]] ; then
    args+=( "--privileged" )
fi

# Propagate all environment variables into the container if requested
if [[ "${BUILDKITE_PLUGIN_DOCKER_PROPAGATE_ENVIRONMENT:-false}" =~ ^(true|on|1)$ ]] ; then
  if [[ -n "${BUILDKITE_ENV_FILE:-}" ]] ; then
    # Read in the env file and convert to --env params for docker
    # This is because --env-file doesn't support newlines or quotes per https://docs.docker.com/compose/env-file/#syntax-rules
    while read -r var; do
      args+=( --env "${var%%=*}" )
    done < "$BUILDKITE_ENV_FILE"
  else
    echo -n "ðŸš¨ Not propagating environment variables to container as \$BUILDKITE_ENV_FILE is not set"
  fi
fi

if [[ "${BUILDKITE_PLUGIN_DOCKER_ALWAYS_PULL:-false}" =~ ^(true|on|1)$ ]] ; then
  echo "--- :docker: Pulling ${BUILDKITE_PLUGIN_DOCKER_IMAGE}"
  if ! retry "${BUILDKITE_PLUGIN_DOCKER_PULL_RETRIES:-3}" \
       docker pull "${BUILDKITE_PLUGIN_DOCKER_IMAGE}" ; then
    echo "!!! :docker: Pull failed."
    exit $retry_exit_status
  fi
fi

# Parse network and create it if it don't exist.
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_NETWORK:-}" ]] ; then
  DOCKER_NETWORK_ID=$(docker network ls --quiet --filter "name=${BUILDKITE_PLUGIN_DOCKER_NETWORK}")
  if [[ -z ${DOCKER_NETWORK_ID} ]] ; then
    echo "creating network ${BUILDKITE_PLUGIN_DOCKER_NETWORK}"
    docker network create "${BUILDKITE_PLUGIN_DOCKER_NETWORK}"
  else
    echo "docker network ${BUILDKITE_PLUGIN_DOCKER_NETWORK} already exists"
  fi
  args+=("--network" "${BUILDKITE_PLUGIN_DOCKER_NETWORK:-}")
fi

# Support docker run --runtime
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_RUNTIME:-}" ]] ; then
  args+=("--runtime" "${BUILDKITE_PLUGIN_DOCKER_RUNTIME:-}")
fi

# Support docker run --ipc
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_IPC:-}" ]] ; then
  args+=("--ipc" "${BUILDKITE_PLUGIN_DOCKER_IPC:-}")
fi

shell=()
shell_disabled=1

if [[ -n "${BUILDKITE_COMMAND}" ]]; then
  shell_disabled=''
fi

# Handle setting of shm size if provided
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_SHM_SIZE:-}" ]]; then
  args+=("--shm-size" "${BUILDKITE_PLUGIN_DOCKER_SHM_SIZE}")
fi

# Handle entrypoint if set (or empty), and default shell to disabled
if [[ "${BUILDKITE_PLUGIN_DOCKER_ENTRYPOINT-false}" != "false" ]] ; then
  args+=("--entrypoint" "${BUILDKITE_PLUGIN_DOCKER_ENTRYPOINT:-}")
  shell_disabled=1
fi

# Handle shell being disabled
if [[ "${BUILDKITE_PLUGIN_DOCKER_SHELL:-}" =~ ^(false|off|0)$ ]] ; then
  shell_disabled=1

# Show a helpful error message if a string version of shell is used
elif [[ -n "${BUILDKITE_PLUGIN_DOCKER_SHELL:-}" ]] ; then
  echo -n "ðŸš¨ The Docker Pluginâ€™s shell configuration option can no longer be specified as a string, "
  echo -n "but only as an array. Please update your pipeline.yml to use an array, "
  echo "for example: [\"/bin/sh\", \"-e\", \"-u\"]."
  echo
  echo -n "Note that the docker plugin will infer a shell if one is required, so you might be able to remove"
  echo "the option entirely"
  exit 1

# Handle shell being provided as a string or list
elif plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_SHELL ; then
  shell_disabled=''
  for arg in "${result[@]}" ; do
    shell+=("$arg")
  done
fi

# Add the job id as meta-data for reference in pre-exit
args+=("--label" "com.buildkite.job-id=${BUILDKITE_JOB_ID}")

# Add the image in before the shell and command
args+=("${BUILDKITE_PLUGIN_DOCKER_IMAGE}")

# Set a default shell if one is needed
if [[ -z $shell_disabled ]] && [[ ${#shell[@]} -eq 0 ]] ; then
  if is_windows ; then
    shell=("CMD.EXE" "/c")
  else
    shell=("/bin/sh" "-e" "-c")
  fi
fi

command=()

# Parse plugin command if provided
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_COMMAND ; then
  for arg in "${result[@]}" ; do
    command+=("$arg")
  done
fi

if [[ ${#command[@]} -gt 0 ]] && [[ -n "${BUILDKITE_COMMAND}" ]] ; then
  echo "+++ Error: Can't use both a step level command and the command parameter of the plugin"
  exit 1
fi

# Assemble the shell and command arguments into the docker arguments

if [[ ${#shell[@]} -gt 0 ]] ; then
  for shell_arg in "${shell[@]}" ; do
    args+=("$shell_arg")
  done
fi

if [[ -n "${BUILDKITE_COMMAND}" ]] ; then
  if is_windows ; then
    # The windows CMD shell only supports multiple commands with &&.
    windows_multi_command=${BUILDKITE_COMMAND//$'\n'/ && }
    args+=("${windows_multi_command}")
  else
    args+=("${BUILDKITE_COMMAND}")
  fi
elif [[ ${#command[@]} -gt 0 ]] ; then
  for command_arg in "${command[@]}" ; do
    args+=("$command_arg")
  done
fi

echo "--- :docker: Running command in ${BUILDKITE_PLUGIN_DOCKER_IMAGE}"
echo -ne '\033[90m$\033[0m docker run ' >&2

# Print all the arguments, with a space after, properly shell quoted
printf "%q " "${args[@]}"
echo

# Don't convert paths on gitbash on windows, as that can mangle user paths and cmd options.
# See https://github.com/buildkite-plugins/docker-buildkite-plugin/issues/81 for more information.
( if is_windows ; then export MSYS_NO_PATHCONV=1; fi && docker run "${args[@]}" )
